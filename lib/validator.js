// Generated by CoffeeScript 1.10.0
(function() {
  var Async, Compare, Joi, Missing_one, Q, Request, Validator, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  Joi = require('joi');

  _ = require('lodash');

  Missing_one = require('./delete_one');

  Request = require('request');

  Async = require('async');

  Compare = require('./compare');

  module.exports = Validator = (function() {
    Validator.prototype.testCases = ['missing_one'];

    Validator.prototype.errors = [];

    Validator.prototype.tests_count = 0;

    Validator.prototype.first_error = true;

    function Validator(options, schemas1, done) {
      this.schemas = schemas1;
      this.done = done;
      this.call = bind(this.call, this);
      this.baseUrl = options.baseUrl;
      this.login = options.login != null ? options.login : false;
      this.tests_count = 0;
      this.errors = [];
      this.first_error = options.first_error != null ? options.first_error : true;
    }

    Validator.prototype.call = function(data, cb) {
      var _this;
      _this = this;
      data[0].jar = _this.jar;
      return Request(data[0], function(err, response, body) {
        var message;
        _this.tests_count--;
        if (err) {
          throw err;
        }
        message = Compare(response.statusCode, body, data[1], data[0].uri);
        if (!message) {
          return cb(false, false);
        } else {
          if (_this.first_error) {
            return cb(message, false);
          } else {
            _this.errors.push(message);
            return cb();
          }
        }
      });
    };

    Validator.prototype.go_login = function() {
      var deferred, jar;
      deferred = Q.defer();
      jar = Request.jar();
      Request.defaults({
        jar: jar
      });
      Request({
        uri: "" + this.baseUrl + this.login.url,
        method: 'POST',
        formData: this.login.auth,
        jar: jar
      }, (function(_this) {
        return function(err, response, body) {
          if (err) {
            deferred.reject(err);
          } else {
            if (response.statusCode !== 200) {
              deferred.reject(new Error("Login for " + _this.login.url + " wasn't successfull"));
            }
          }
          _this.jar = jar;
          return deferred.resolve(body);
        };
      })(this));
      return deferred.promise;
    };

    Validator.prototype.missing_one_request = function(loads, method, url) {
      var coll, data, i, item, j, k, len;
      coll = [];
      data = {
        uri: this.baseUrl + "/" + url,
        method: method
      };
      for (k = j = 0, len = loads.length; j < len; k = ++j) {
        i = loads[k];
        if (loads[k].deleted) {
          if (method === 'POST' || method === 'PUT') {
            data.formData = loads[k].values;
          } else {
            data.qs = loads[k].values;
          }
          item = [_.clone(data), loads[k]];
          coll.push(item);
        }
      }
      this.tests_count = this.tests_count + coll.length;
      return Async.map(coll, this.call, (function(_this) {
        return function(err, result) {
          if (_this.first_error) {
            if (err) {
              return _this.done(true, err);
            } else {
              return _this.done(null, []);
            }
          } else {
            if (!_this.tests_count) {
              if (_this.errors.length) {
                return _this.done(true, _this.errors);
              } else {
                return _this.done(null, []);
              }
            }
          }
        };
      })(this));
    };

    Validator.prototype.missing_one = function() {
      var data, item, key, method, parts, ref, result, results, schemas, url;
      ref = this.schemas;
      results = [];
      for (key in ref) {
        item = ref[key];
        if (item.query != null) {
          schemas = Joi.describe(item.query);
        } else {
          schemas = Joi.describe(item.payload);
        }
        result = Missing_one(schemas, item.defaults, key);
        parts = _.split(key, '/');
        method = parts[0].toUpperCase();
        url = _.join(parts.slice(1), '/');
        data = {
          uri: this.baseUrl + "/" + url
        };
        switch (method) {
          case 'POST':
          case 'PUT':
            results.push(this.missing_one_request(result, method, url));
            break;
          case 'GET':
            results.push(this.missing_one_request(result, method, url));
            break;
          default:
            results.push(void 0);
        }
      }
      return results;
    };

    Validator.prototype.tests = function() {
      var index, item, j, len, ref, results;
      ref = this.testCases;
      results = [];
      for (index = j = 0, len = ref.length; j < len; index = ++j) {
        item = ref[index];
        switch (item) {
          case 'missing_one':
            results.push(this.missing_one());
            break;
          default:
            results.push(void 0);
        }
      }
      return results;
    };

    Validator.prototype.run = function() {
      var _this;
      _this = this;
      if (_this.login) {
        return this.go_login().then(function(result) {
          return _this.tests();
        })["catch"](function(err) {
          if (err) {
            throw new Error(err);
          }
        }).done();
      } else {
        return _this.tests();
      }
    };

    return Validator;

  })();

}).call(this);
